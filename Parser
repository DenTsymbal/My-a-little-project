#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdint.h>
#include <stddef.h>
#include <assert.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>

//stretchy buffers, invented (?) by Sean Baret

#define MAX(x,y) ((x) >= (y) ? (x) : (y))

void *xrealloc(void *ptr,size_t num_bytes)
{
	ptr = realloc(ptr, num_bytes);
	if(!ptr)
	{
		perror("xrealloc failed");
		exit(1);
	}
	return ptr;
}

void *xmalloc(size_t num_bytes)
{
	void *ptr = malloc(num_bytes);
	if (!ptr)
	{
		perror("xrealloc failed");
		exit(1);
	}
	return ptr;
}

typedef struct BufHdr
{
	size_t len;
	size_t cap;
	char   buf[0];
} BufHdr;


#define buf__hdr(b) ((BufHdr *)(char *)b - offsetof(BufHdr,buf))
#define buf_fits(b,n) (buf_len(b) + (n) <= buf_cap(b))
#define buf_fit(b,n)  (buf_fits(b,n) ? 0 : ((b) = buf__grown((b), buf_len(b) + (n), sizeof(*(b)))))

#define buf_len(b) ((b) ? buf__hdr(b)->len : 0)
#define buf_cap(b) ((b) ? buf__hdr(b)->cap : 0)
#define buf_push(b,x) (buf_fits((b),1),  (b)[buf__hdr(b)->len++] = (x))
#define buf_free(b)   ((b) ? (free(buf__hdr(b)),(b) = NULL) : 0);


void *buf__grown(const char *buf, size_t new_len, size_t elem_size)
{
	size_t new_cap = MAX(1 + 2 * buf_cap(buf), new_len);
	assert(new_len <= new_cap);
	size_t new_size = offsetof(BufHdr,buf) + new_cap * elem_size;
	BufHdr *new_hdr;
	if (buf)
	{
		new_hdr = xrealloc(buf__hdr(buf), new_size);
	}
	else
	{
		new_hdr = xmalloc(new_size);
		new_hdr->len = 0;
	}
	new_hdr->cap = new_cap;
	return new_hdr->buf;
}

void buf_test()
{
	int *asdf = NULL;
	assert(buf_len(asdf) == 0);
	enum { N = 1024 };
	for (int i = 0; i < N; i++)
	{
		
	}
	assert(buf_len(asdf) == N);
	for (int i = 0; i < N; i++)
	{
		assert(asdf[i] == i);
	}
	buf_free(asdf);
	assert(asdf = NULL);
	assert(buf_len(asdf) == NULL);
}

typedef struct InternStr {

	size_t len;
	const char *str;
} InternStr;

static InternStr *interns;

const char *str_intern_rage(const char *start,const char *end)
{
	size_t len = end - start;
	for(size_t i = 0; i < buf_len(interns); i++)
	{
	   if(interns->len == len && strcmp(interns[i].str,start,len) == 0 )
	   {
		   return interns[i].str;
	   }
	   char *str = malloc(len + 1);
	   memcpy(str, start, len);
	   str[len] = 0;
	   buf_push(interns, ((InternStr){ len,str }));
	}
}

const char *str_intern(const char *str)
{
	return str_intern_rage(str, str + strlen(str));
}

typedef enum Tokenkind
{
	//Reserve firts 128 values for one-char tokens
	TOKEN_LAST_CHAR = 127,
	TOKEN_INT,
	TOKEN_NAME,
	// ...
} Tokenkind;

typedef struct Token
{
	Tokenkind kind;
	const char *start;
	const char *end;
	union 
	{
		uint64_t val;
		
		
	};
} Token;



Token token;
const char *stream;

void next_token()
{
	token.start = stream;
	switch (*stream)
	{
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9': {
		uint64_t val = 0;
		while (isdigit(*stream))
		{
			val *= 10;
			val += *stream++ - '0';
		}
		token.kind = TOKEN_INT;
		token.val = val;
	}
	case '_': 
		while (isalnum(*stream) || *stream == '_')
		{
			stream++;
		}
		token.kind = TOKEN_NAME;	
		break;
	
	default:
		token.kind = *stream++;
	}
	token.end = stream;
}

void print_token(Token token)
{

	switch (token.kind)
	{
	case TOKEN_INT:
		printf("Valu: %llu\n", token.val);
		break;
	case TOKEN_NAME:
		printf("NAME: %. *s\n", (int)(token.end - token.start),token.start);
		break;
	default:
		printf("TOKEN '%c'\n", token.kind);
		break;
	}
}

void lex_test()
{
	char *source = "(3432)+=";
	stream = source;
	next_token();
	while(token.kind)
	{
		print_token(token);
		next_token();
	}
}

int main(int argc, char** argv)
{   
	buf_test();
	lex_test();
	return 0;
}
